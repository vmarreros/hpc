version: "3"

services:
    postgres:
        build:
            context: ./service_postgres
            args:
                - ENVIRONMENT=${ENVIRONMENT}
        image: ${APPLICATION}_${POSTGRES_HOST}:${VERSION}
        container_name: ${APPLICATION}_${POSTGRES_HOST}
        expose:
            - ${POSTGRES_PORT}
        volumes:
            - ./service_postgres/volumes/postgres/${ENVIRONMENT}:/var/lib/postgresql/data:rw
        networks:
            - ${APPLICATION}
        restart: unless-stopped
    pgadmin:
        build:
            context: ./service_pgadmin
            args:
                - ENVIRONMENT=${ENVIRONMENT}
        image: ${APPLICATION}_${PGADMIN_HOST}:${VERSION}
        container_name: ${APPLICATION}_${PGADMIN_HOST}
        ports:
            - ${PGADMIN_PORT}:443
        volumes:
            - ./service_pgadmin/volumes/pgadmin/${ENVIRONMENT}:/var/lib/pgadmin:rw
            - ./service_pgadmin/volumes/ssl/certificate.crt:/certs/server.cert:rw
            - ./service_pgadmin/volumes/ssl/certificate_key.key:/certs/server.key:rw
        env_file:
            - .env
        networks:
            - ${APPLICATION}
        restart: unless-stopped
    rabbitmq:
        build:
            context: ./service_rabbitmq
            args:
                - ENVIRONMENT=${ENVIRONMENT}
        image: ${APPLICATION}_${RABBITMQ_HOST}:${VERSION}
        container_name: ${APPLICATION}_${RABBITMQ_HOST}
        expose:
            - ${RABBITMQ_PORT}
        volumes:
            - ./service_rabbitmq/volumes/rabbitmq/${ENVIRONMENT}:/var/lib/rabbitmq:rw
        env_file:
            - .env
        networks:
            - ${APPLICATION}
        restart: unless-stopped
    django:
        build:
            context: ./service_django
            args:
                - ENVIRONMENT=${ENVIRONMENT}
        image: ${APPLICATION}_${DJANGO_HOST}:${VERSION}
        container_name: ${APPLICATION}_${DJANGO_HOST}
        depends_on:
            - ${POSTGRES_HOST}
            - ${RABBITMQ_HOST}
        expose:
            - ${DJANGO_PORT}
        volumes:
            - ./service_django/application:/service_django/application:rw
            - ./service_django/commands:/service_django/commands:rw
            - ./service_django/volumes/celery/${ENVIRONMENT}:/service_django/volumes/celery:rw
            - ./service_django/volumes/staticfiles/${ENVIRONMENT}:/service_django/volumes/staticfiles:rw
            - ./service_django/volumes/mediafiles/${ENVIRONMENT}:/service_django/volumes/mediafiles:rw
        env_file:
            - .env
        networks:
            - ${APPLICATION}
        restart: unless-stopped
    nginx:
        build:
            context: ./service_nginx
            args:
                - ENVIRONMENT=${ENVIRONMENT}
        image: ${APPLICATION}_${NGINX_HOST}:${VERSION}
        container_name: ${APPLICATION}_${NGINX_HOST}
        depends_on:
            - ${DJANGO_HOST}
        ports:
            - ${NGINX_PORT_HTTP}:80
            - ${NGINX_PORT_HTTPS}:443
        volumes:
            - ./service_django/volumes/staticfiles/${ENVIRONMENT}:/service_nginx/volumes/staticfiles:rw
            - ./service_django/volumes/mediafiles/${ENVIRONMENT}:/service_nginx/volumes/mediafiles:rw
            - ./service_nginx/volumes/nginx/${ENVIRONMENT}:/service_nginx/volumes/nginx:rw
            - ./service_nginx/volumes/ssl/certificate.crt:/etc/nginx/certs/certificate.crt:rw
            - ./service_nginx/volumes/ssl/certificate_key.key:/etc/nginx/certs/certificate_key.key:rw
            - ./service_nginx/conf/nginx.conf:/etc/nginx/nginx.conf
        env_file:
            - .env
        networks:
            - ${APPLICATION}
        restart: unless-stopped

networks:
    hpc:
        external:
            name: ${APPLICATION}
